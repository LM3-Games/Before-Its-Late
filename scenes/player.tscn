[gd_scene load_steps=11 format=3 uid="uid://eh6e2mit7lej"]

[ext_resource type="Script" uid="uid://bb6wtb0ao5x3d" path="res://scripts/player.gd" id="1_3vyb7"]
[ext_resource type="Texture2D" uid="uid://b4k3p1l3ioml2" path="res://assets/art/characters/survivor1_stand.png" id="2_g2els"]
[ext_resource type="Texture2D" uid="uid://dpo5trb7us47v" path="res://assets/art/characters/survivor1_hold.png" id="3_qhqgy"]

[sub_resource type="Shader" id="Shader_qhqgy"]
code = "shader_type canvas_item;

uniform bool show_outline = true;
uniform bool allow_out_of_bounds = true;
uniform float outline_thickness: hint_range(0.0, 16.0, 1.0) = 1.0;
uniform vec4 outline_color: source_color = vec4(1.0);

bool is_inside_usquare(vec2 x) {
	return x == clamp(x, vec2(0.0), vec2(1.0));
}

vec4 blend(vec4 bottom, vec4 top) {
    float alpha = top.a + bottom.a * (1.0 - top.a);
    if (alpha < 0.0001) return vec4(0.0);

    vec3 color = mix(bottom.rgb * bottom.a, top.rgb, top.a) / alpha;
    return vec4(color, alpha);
}

void vertex() {
	if (allow_out_of_bounds) VERTEX += (UV * 2.0 - 1.0) * outline_thickness;
}

void fragment() {
	if(show_outline) {
	if (outline_thickness > 0.0 && outline_color.a > 0.0) {
		vec2 uv = UV;
		vec4 texture_color = texture(TEXTURE, UV);

		if (allow_out_of_bounds) {
			vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(outline_thickness * 2.0));
			uv = (uv - texture_pixel_size * outline_thickness) * TEXTURE_PIXEL_SIZE / texture_pixel_size;

			if (is_inside_usquare(uv)) {
				texture_color = texture(TEXTURE, uv);
			} else {
				texture_color = vec4(0.0);
			}
		}

		float alpha = 0.0;
		
		for (float y = 1.0; y <= outline_thickness; y++) {
			for (float x = 0.0; x <= y; x++) {
				if (length(vec2(x, y - 0.5)) > outline_thickness) break;

				float look_at_alpha;
				vec2 look_at_uv[8] = {
					uv + vec2(x, y) * TEXTURE_PIXEL_SIZE,
					uv + vec2(-x, y) * TEXTURE_PIXEL_SIZE,
					uv + vec2(x, -y) * TEXTURE_PIXEL_SIZE,
					uv + vec2(-x, -y) * TEXTURE_PIXEL_SIZE,
					uv + vec2(y, x) * TEXTURE_PIXEL_SIZE,
					uv + vec2(-y, x) * TEXTURE_PIXEL_SIZE,
					uv + vec2(y, -x) * TEXTURE_PIXEL_SIZE,
					uv + vec2(-y, -x) * TEXTURE_PIXEL_SIZE
				};

				for (int i = 0; i < 8; i++) {
					if (is_inside_usquare(look_at_uv[i])) {
						look_at_alpha = texture(TEXTURE, look_at_uv[i]).a;
						if (look_at_alpha > alpha) alpha = look_at_alpha;
						if (1.0 - alpha < 0.0001) break;
					}
				}
				
				if (1.0 - alpha < 0.0001) break;
			}
				
			if (1.0 - alpha < 0.0001) break;
		}

		COLOR = blend(vec4(outline_color.rgb, alpha * outline_color.a), texture_color);
	}
	}
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dqkch"]
resource_local_to_scene = true
shader = SubResource("Shader_qhqgy")
shader_parameter/show_outline = true
shader_parameter/allow_out_of_bounds = true
shader_parameter/outline_thickness = 2.0
shader_parameter/outline_color = Color(0, 1, 1, 1)

[sub_resource type="CircleShape2D" id="CircleShape2D_g2els"]
radius = 5.0

[sub_resource type="Animation" id="Animation_qhqgy"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("2_g2els")]
}

[sub_resource type="Animation" id="Animation_dqkch"]
resource_name = "loot"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("3_qhqgy")]
}

[sub_resource type="Animation" id="Animation_g2els"]
resource_name = "walk"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("2_g2els")]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_dqkch"]
_data = {
&"RESET": SubResource("Animation_qhqgy"),
&"loot": SubResource("Animation_dqkch"),
&"walk": SubResource("Animation_g2els")
}

[node name="Player" type="CharacterBody2D" groups=["player"]]
z_index = 1
y_sort_enabled = true
collision_layer = 2
collision_mask = 13
motion_mode = 1
wall_min_slide_angle = 0.0
script = ExtResource("1_3vyb7")
speed = 70.0

[node name="Sprite" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_dqkch")
scale = Vector2(0.23, 0.23)
texture = ExtResource("2_g2els")
region_rect = Rect2(352, 176, 37, 43)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CircleShape2D_g2els")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
&"": SubResource("AnimationLibrary_dqkch")
}
autoplay = "walk"
